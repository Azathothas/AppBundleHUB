name: Build and Release AppBundles (MATRIX)

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  find-scripts:
    name: Find and Prepare Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find build scripts
        id: find_scripts
        run: |
          # Find all scripts in the recipes directory
          if [ -d "${{ github.workspace }}/recipes" ]; then
            find "${{ github.workspace }}/recipes" -type f -name "*.sh" > scripts.txt
          else
            echo "No recipes directory found."
            exit 1
          fi

          # Set scripts list as a matrix strategy
          scripts=$(cat scripts.txt | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "::set-output name=scripts::$scripts"

  build:
    name: Build and Run Scripts
    needs: find-scripts  # Ensure that the find-scripts job runs first
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [amd64, arm64]
        include:
          - architecture: amd64
            out_suffix: '-amd64'
          - architecture: arm64
            out_suffix: ''
        script: ${{ fromJson(needs.find-scripts.outputs.scripts) }}  # Use the scripts found in the previous step
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install Build Tools and Environment
        run: |
          # Set output directory
          OUT_DIR="$HOME/out"
          mkdir -p "$OUT_DIR"

          DBIN_PGRS="dwarfs-tools bwrap-patched sharun yq jq"

          export GOBIN="$HOME/.local/bin"
          mkdir -p "$GOBIN"

          git clone --depth 1 --branch dev https://github.com/xplshn/pelf
          
          cp ./pelf/pelf* "$GOBIN"
          cp ./pelf/cmd/misc/* "$GOBIN"

          cd pelf/cmd/pelfd
          go build -o "$GOBIN/pelfd"

          cd ../dynexec/lib4bin
          go build -o "$GOBIN/lib4bin"

          wget -qO- "https://raw.githubusercontent.com/xplshn/dbin/master/stubdl" | sh -s -- --install "$GOBIN/dbin" add $DBIN_PGRS && \
          export PATH="$GOBIN:$PATH" && {
            ln -sfT "$GOBIN/dwarfs-tools" "$GOBIN/mkdwarfs"
            ln -sfT "$GOBIN/dwarfs-tools" "$GOBIN/dwarfs"
            ln -sfT "$GOBIN/bwrap-patched" "$GOBIN/bwrap"
          }

      - name: Setup Shared devEnv
        run: |
          ROOTFS_URL="$(curl -qsL https://dl-cdn.alpinelinux.org/alpine/edge/releases/x86_64/latest-releases.yaml | yq '.[0].file')"
          ROOTFS_URL="https://dl-cdn.alpinelinux.org/alpine/edge/releases/$(uname -m)/${ROOTFS_URL}"
          export ROOTFS_URL

          pelfCreator -m xplshn -n devEnv -p "fuse3 build-base go git" -z -c
          devEnv="$(echo ${{ github.workspace }}/devEnv*/AppRun)"
          echo "devEnv=${devEnv}" >> $GITHUB_ENV

      - name: Run Build Script
        run: |
          # Make the current script executable and run it with devEnv
          chmod +x "${{ matrix.script }}"
          "${{ env.devEnv }}" "${{ matrix.script }}"

      - name: Upload Artifacts
        run: |
          ls "$HOME/out"
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV

  manage-tags:
    name: Manage Tags
    runs-on: ubuntu-latest
    needs: build  # Ensure it runs after all builds are done

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manage Tags
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the list of tags and count them
          TAGS=$(git tag | sort -V)  # Sort tags in version order
          TAG_COUNT=$(echo "$TAGS" | wc -l)

          if [ "$TAG_COUNT" -gt 5 ]; then
            # Get the tags to delete (all except the latest)
            TAGS_TO_DELETE=$(echo "$TAGS" | head -n -1)  # All but the last tag

            # Delete each old tag
            for TAG in $TAGS_TO_DELETE; do
              echo "Deleting tag: $TAG"
              git tag -d "$TAG" || echo "Tag $TAG could not be deleted locally."
              git push origin --delete "$TAG" || echo "Tag $TAG could not be deleted from remote."
            done
          else
            echo "Tag count is $TAG_COUNT, no tags to delete."
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: "Weekly Release - Run ${{ github.run_id }}"
          automatic_release_tag: weekly-release-${{ github.run_id }}
          prerelease: false
          draft: false
          files: |
            ${{ env.OUT_DIR }}/*.AppBundle${{ matrix.out_suffix }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
